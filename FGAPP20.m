%% FastGAPP v2.0% Graphical user interface to initialise FastGAPP% - Setup of importants paths% - Loading of .config - file% - Allocation of important variables% This GUI allow to:% - Startup of the main programs% - Startup of the tools% - Startup of the development tools%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Author: Florian Riefstahl% Institutions: University of Bremen, Bremen, Germany%               Alfred-Wegener-Institute, Bremerhaven, Germany%               Christian-Albrechts-University Kiel, Kiel, Germany% Version: Initial version 2015-2016% Further development: Mainly 2019%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Revisions:% July 2019: Revision for convert2mat tool: Now uses the selected data%            location%            Short change of displayed programs (only programs for initial version)%% October 2019: Text after using the load sessions and dataset buttons is%               updated%               %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Important variables:% files{9,6} ==> files and fileparts are stored in this variable% 1. file, 2. file's path, 3. file and path, 4. file name,% 5. file extension, 6. file operator% files_op ==> number of valid files to load%   ==> string if session was loaded%   ==> double if datasets are loaded% load_op ==> load operator (=1 if files were loaded otherwise =0)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%function FGAPP20%% 00a Initializationclose all; clear all; clc;% Output to command windowfprintf('\n')fprintf('**********************************************************\n');fprintf('**********************************************************\n');fprintf('***** FAST ***********************************************\n');fprintf('********** GEOSCIENTIFIC *********************************\n');fprintf('********************** ANALYSES **************************\n');fprintf('***************************** PLOTTING *******************\n');fprintf('************************************ PROGRAM *************\n');fprintf('**********************************************************\n');fprintf('******************* FastGAPP V2.0 ************************\n');fprintf('**********************************************************\n');fprintf('**********************************************************\n');fprintf('\n')%% 00b Add paths% Check if the program is compiledif isdeployed == false% Get current pathdir.source = pwd;% Add "bin" path addpath([dir.source '/bin']);% Add "conf" pathaddpath([dir.source '/conf'])% Add program and programs pathaddpath(genpath([dir.source '/db']));% addpath([dir.source '/db/conversion']);% addpath([dir.source '/db/normalisation']);% addpath([dir.source '/db/tools']);% addpath([dir.source '/db/fastgapp']);% addpath([dir.source '/db/petroplot']);% addpath([dir.source '/db/sediplot']);% addpath([dir.source '/db/soilplot']);% Add development pathsaddpath([dir.source '/development']);% Add tools and pathaddpath([dir.source '/tools']);end%% 00c Load config file% Check if the config file existsif exist('fgapp20.config','file') == 2;    fprintf('fgapp20.config found...\n')    load('fgapp20.config','-mat')    fprintf('...loading!\n')    % Check for data path    if exist('data_path','var')        fprintf('Data path: %s\n',data_path)    else        fprintf('No data path found...\n')        fprintf('...using default path!\n')        data_path = pwd;    end    % Check for save path    if exist('save_path','var')        fprintf('Save path: %s\n',save_path)    else        fprintf('No save path found...\n')        fprintf('...using default path!\n')        save_path = pwd;    endelse    fprintf('fgapp20.config not found...\n')    fprintf('...using default path!\n')    data_path = pwd;    save_path = pwd;end%% 00d Allocate important variables% Create empty cell array for selected datasetsfiles = cell(9,6);% Set the file operator to zerofor i = 1:9; files{i,6} = 0; end;% Set the files operator (usage???)files_op = 0;% Set the load operator to zero (= no session loaded) load_op = 0;%% 00e Create the GUI% Give ouput to command windowfprintf('Launching FastGAPP v2.0... - Time: %s\n',datestr(clock));% Create and then hide the GUI during the construction processfgapp_ini = figure('Visible','off');% Deactivate figure number and resizingset(fgapp_ini,'NumberTitle','off','Resize','off')% Setup the pointer and rendererset(fgapp_ini,'Pointer','arrow','Renderer','zbuffer')% Set units of the figure to pixel and hide menu bar.set(fgapp_ini,'Units','pixel','MenuBar','none');% Set size and position (absolute pixel) of the figure and set name of the GUIset(fgapp_ini,'Position',[20,40,1280,720],'Name','FastGAPP v2.0');% Change the background color of the GUI to blackset(fgapp_ini,'Color',[.8,.8,.8]);% Create header line with textuicontrol('Style','text',...          'String','FastGAPP - Fast GeoscientificAnalysisPlottingProgram v2.0',...          'ForegroundColor',[1.0,1.0,1.0],'BackgroundColor',[0.0,0.0,0.0],...          'FontSize',25,'FontWeight','bold','FontName','Arial','HorizontalAlignment','left',...          'Units','normalized','Position',[0.0,0.94,1.0,0.055]);% Some more colorful capital lettersuicontrol('Style','text',...          'String','F',...          'ForegroundColor',[1.0,0.0,0.0],'BackgroundColor',[0.0,0.0,0.0],...          'FontSize',25,'FontWeight','bold','FontName','Arial','HorizontalAlignment','left',...          'Units','normalized','Position',[0.0,0.94,0.016,0.055]);uicontrol('Style','text',...          'String','G',...          'ForegroundColor',[1.0,0.5,0.0],'BackgroundColor',[0.0,0.0,0.0],...          'FontSize',25,'FontWeight','bold','FontName','Arial','HorizontalAlignment','left',...          'Units','normalized','Position',[0.0540,0.94,0.0192,0.055]);uicontrol('Style','text',...          'String','A',...          'ForegroundColor',[1.0,1.0,0.0],'BackgroundColor',[0.0,0.0,0.0],...          'FontSize',25,'FontWeight','bold','FontName','Arial','HorizontalAlignment','left',...          'Units','normalized','Position',[0.07325,0.94,0.0186,0.055]);uicontrol('Style','text',...          'String','P',...          'ForegroundColor',[0.0,1.0,0.0],'BackgroundColor',[0.0,0.0,0.0],...          'FontSize',25,'FontWeight','bold','FontName','Arial','HorizontalAlignment','left',...          'Units','normalized','Position',[0.092,0.94,0.017,0.055]);uicontrol('Style','text',...          'String','P',...          'ForegroundColor',[0.0,0.0,1.0],'BackgroundColor',[0.0,0.0,0.0],...          'FontSize',25,'FontWeight','bold','FontName','Arial','HorizontalAlignment','left',...          'Units','normalized','Position',[0.109,0.94,0.017,0.055]);uicontrol('Style','text',...          'String','F',...          'ForegroundColor',[1.0,0.0,0.0],'BackgroundColor',[0.0,0.0,0.0],...          'FontSize',25,'FontWeight','bold','FontName','Arial','HorizontalAlignment','left',...          'Units','normalized','Position',[0.146,0.94,0.016,0.055]);uicontrol('Style','text',...          'String','G',...          'ForegroundColor',[1.0,0.5,0.0],'BackgroundColor',[0.0,0.0,0.0],...          'FontSize',25,'FontWeight','bold','FontName','Arial','HorizontalAlignment','left',...          'Units','normalized','Position',[0.207,0.94,0.0192,0.055]);uicontrol('Style','text',...          'String','A',...          'ForegroundColor',[1.0,1.0,0.0],'BackgroundColor',[0.0,0.0,0.0],...          'FontSize',25,'FontWeight','bold','FontName','Arial','HorizontalAlignment','left',...          'Units','normalized','Position',[0.3658,0.94,0.0186,0.055]);uicontrol('Style','text',...          'String','P',...          'ForegroundColor',[0.0,1.0,0.0],'BackgroundColor',[0.0,0.0,0.0],...          'FontSize',25,'FontWeight','bold','FontName','Arial','HorizontalAlignment','left',...          'Units','normalized','Position',[0.47,0.94,0.017,0.055]);uicontrol('Style','text',...          'String','P',...          'ForegroundColor',[0.0,0.0,1.0],'BackgroundColor',[0.0,0.0,0.0],...          'FontSize',25,'FontWeight','bold','FontName','Arial','HorizontalAlignment','left',...          'Units','normalized','Position',[0.565,0.94,0.017,0.055]);      % Create white header lineuicontrol('Style','text','String','',...          'ForegroundColor',[.0,.0,.0],'BackgroundColor',[1,1,1],...          'Units','normalized','Position',[.0,.93,1.,.01]);% Create black header lineuicontrol('Style','text','String','',...          'ForegroundColor',[1,1,1],'BackgroundColor',[.0,.0,.0],...          'Units','normalized','Position',[.0,.92,1.,.01]);      %% 01 Create button group for programm selection% Create button group with programsmainswitch = uibuttongroup('Title','Programs','TitlePosition','centertop',...                           'Units','normalized','Position',[0.01 0.07 0.15 0.85],...                           'ForegroundColor',[.0 .0 .0],'BackgroundColor',[.8 .8 .8],...                           'Fontsize',16,'FontWeight','Bold',...                           'Visible','Off');% Create empty cell array for radio buttonsmainswitch_u = cell(20,1);% Allocate strings, callbacks and visibility for the buttonsmainswitch_u_txt = create_rb_cellarr;                 %% 01a Create radio buttons for different programs% Define start position9stpos = 0.95;% Create radio buttons in loopfor i = 1:size(mainswitch_u)    mainswitch_u{i,1} = uicontrol('Style','Radio','Units','normalized','Position',[0.02 stpos 0.96 0.05],'Parent',mainswitch,...                                  'String',mainswitch_u_txt{i,1},'ToolTipString',sprintf(mainswitch_u_txt{i,2}),'Visible',mainswitch_u_txt{i,3},...                                  'FontSize',14,'FontWeight','Bold',...                                  'ForegroundColor',[.0 .0 .0],'BackgroundColor',[.8 .8 .8]);    stpos = stpos - 0.05;end% Define callback and selection for button groupset(mainswitch,'SelectionChangeFcn',@select_program,'SelectedObject',[]);  % No selection% Make the button group visibleset(mainswitch,'Visible','On');%% 02 Create data selection panel% Create panelseldatapanel = uipanel('Title','',...                       'Units','normalized','Position',[.17 .07 .82 .85],...                       'FontSize',14,'FontWeight','bold',...                       'ForegroundColor',[.0,.0,.0],'BackgroundColor',[.8,.8,.8],...                       'Visible','off');% Preallocate cell arrayseldatapanel_u = cell(11,1);%% 02a Create dataset selection buttons and corresponding status text% Set initial position and preallocate cell array for objectsstpos = 0.91;% Create dataset buttons in loopfor i = 1:9% Dataset buttonsseldatapanel_u{i,1} = uicontrol('Style','pushbutton','String',sprintf('Dataset %s',num2str(i)),...                                'Tag',num2str(i),...                                'Units','normalized','Position',[.02 stpos .15 .08],...                                'Parent',seldatapanel,'Callback',@seldata_callback);stpos = stpos - 0.1;set(seldatapanel_u{i,1},'FontSize',14,'FontWeight','bold',...                        'ForegroundColor',[.0,.0,.0],'BackgroundColor',[1.,1.,1.]);end% Create dataset file name text object in loop% Set initial position and preallocate cell array for objectsstpos = 0.945; seldatapanel_t = cell(9,1);for i = 1:9% Dataset textseldatapanel_t{i,1} = uicontrol('Style','text','String','',...                      'Units','normalized','Position',[.18 stpos .81 .04],...                      'parent',seldatapanel,'Callback',@seldata_callback);stpos = stpos - 0.1;set(seldatapanel_t{i,1},'FontSize',10,'FontWeight','bold','HorizontalAlignment','Left',...                        'ForegroundColor',[1.,1.,.0],'BackgroundColor',[.8,.8,.8]);end% Create dataset file name text status object in loop% Set initial position and preallocate array cell for objectsstpos = 0.905; seldatapanel_s = cell(9,1);for i = 1:9% Dataset textseldatapanel_s{i,1} = uicontrol('Style','text','String','',...                      'Units','normalized','Position',[.18 stpos .81 .04],...                      'parent',seldatapanel,'Callback',@seldata_callback);stpos = stpos - 0.1;   set(seldatapanel_s{i,1},'FontSize',10,'FontWeight','bold',...                        'HorizontalAlignment','Left',...                        'ForegroundColor',[1.,1.,.0],'BackgroundColor',[.8,.8,.8]);end      %% 02b Create load and start button% Load buttonseldatapanel_u{10,1} = uicontrol('Style','pushbutton','String','Load Session',...                      'Units','normalized','Position',[.02 0.01 .15 .08],...                      'FontSize',14,'FontWeight','bold',...                      'ForegroundColor',[0.,0.,0.],'BackgroundColor',[1.,1.,1.],...                      'parent',seldatapanel,'Callback',@startprog_callback);% Start buttonseldatapanel_u{11,1} = uicontrol('Style','pushbutton','String','Start',...                      'Units','normalized','Position',[.18 0.01 .15 .08],...                      'Visible','off',...                      'FontSize',14,'FontWeight','bold',...                      'ForegroundColor',[0.,0.,0.],'BackgroundColor',[.0,.9,.0],...                      'parent',seldatapanel,'Callback',@startprog_callback);                  %% 03 Create tools panel% Create paneltoolspanel = uipanel('Title','Tools / Other Programs','Parent',fgapp_ini,...                     'Units','normalized','Position',[.17 .07 .82 .85],...                     'FontSize',14,'FontWeight','bold',...                     'ForegroundColor',[.0,.0,.0],'BackgroundColor',[.8,.8,.8],...                     'Visible','off');% Allocate cell array for tool buttonstoolspanel_u = cell(10,6);% Create cell array with button text and callbacks for toolstoolspanel_u_txt = {{'Data path',@tools_callback,'Create config file and change data path\nCurrent path: %s',data_path,'on'},... % 1st row                    {'Save path',@tools_callback,'Create config file and change save path\nCurrent path: %s',save_path,'on'},...                    {'Clear config file',@tools_callback,'Delete config file','','on'},...                    {'','','','','off'},{'','','','','off'},...                    {'Convert to MAT',@tools_callback,'','','on'};...                    {'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'};... % 2nd row                    {'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'};... % 3rd row                    {'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'};... % 4th row                    {'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'};... % 5th row                    {'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'};... % 6th row                    {'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'};... % 7th row                    {'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'};... % 8th row                    {'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'},{'','','','','off'};... % 9th row                    {'GeoT','tool_geoT','','','on'},{'','','','','off'},{'','','','','off'},{'','','','','off'},... % 10th row                    {'Chelements','tool_chelements','Show single chemical elements database entries','','on'},...                    {'PTE','tool_PTE','Show Periodic Table of Elements from database entries','','on'};...                    };                %% 03a Create tool buttons% Set initial positionstposx = 0.02;% Create tools buttons in loopfor i = 1:6stposy = 0.91;    for j = 1:10            % Create the button            toolspanel_u{j,i} = uicontrol('Style','Pushbutton','Units','normalized','Position',[stposx stposy .15 .08],'Parent',toolspanel,...                                          'String',toolspanel_u_txt{j,i}{1,1},'Callback',toolspanel_u_txt{j,i}{1,2},...                                          'ToolTipString',sprintf(toolspanel_u_txt{j,i}{1,3},toolspanel_u_txt{j,i}{1,4}),'Visible',toolspanel_u_txt{j,i}{1,5});            % Settings for buttons            set(toolspanel_u{j,i},'FontSize',12,'FontWeight','bold','ForegroundColor',[.0,.0,.0],'BackgroundColor',[1,1,1]);        % Change position        stposy = stposy - 0.1;    end        % Change position at the end of the column    if j == 10        stposx = stposx + 0.16;    endend%% 04 Create development panel% Create paneldeveloppanel = uipanel('Title','DevelopmentTools',...                       'Units','normalized','Position',[.17 .07 .82 .85],...                       'FontSize',14,'FontWeight','bold',...                       'ForegroundColor',[.0,.0,.0],'BackgroundColor',[.8,.8,.8],...                       'Visible','off');% Allocate cell array for development buttonsdeveloppanel_u = cell(10,6);% Create cell array with button text and callbacks for development toolsdeveloppanel_u_txt = {{'PlotScriptCreator','PScreator','','on'},...                      {'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'};...                      {'ProgramCreator','Pcreator','This function creates the program switch!','on'},...                      {'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'};...                      {'NormCreator','Normcreator','This function creates a script, which includes the normalisation values','on'},...                      {'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'};...                      {'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'};...                      {'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'};...                      {'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'};...                      {'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'};...                      {'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'};...                      {'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'};...                      {'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'},{'','','','off'};...                      };                  %% 04a Create elements% Set initial position stposx = 0.02;% Create development buttons in loopfor i = 1:6stposy = 0.91;    for j = 1:10            % Create the button            developpanel_u{j,i} = uicontrol('Style','Pushbutton','Units','normalized','Position',[stposx stposy .15 .08],'Parent',developpanel,...                                            'String',sprintf(developpanel_u_txt{j,i}{1,1}),'Callback',sprintf(developpanel_u_txt{j,i}{1,2}),'ToolTipString',sprintf(developpanel_u_txt{j,i}{1,3}),'Visible',developpanel_u_txt{j,i}{1,4});            % Settings for buttons            set(developpanel_u{j,i},'FontSize',12,'FontWeight','bold','ForegroundColor',[.0,.0,.0],'BackgroundColor',[1,1,1]);        % Change position        stposy = stposy - 0.1;    end        % Change position at the end of the column    if j == 10        stposx = stposx + 0.16;    endend%% 05 Create restart/close panel% Create panelcontrolpanel = uipanel('Title','',...                       'Units','normalized','Position',[.01 0.01 0.15 0.05],...                       'FontSize',14,'FontWeight','bold',...                       'ForegroundColor',[.0,.0,.0],'BackgroundColor',[.8,.8,.8]);                   %% 05a Create restart/close buttons% Create restart buttoncontrolpanel_u(1) = uicontrol('Style','pushbutton','String','Restart',...                      'Units','normalized','Position',[.02 0.1 .47 .8],...                      'parent',controlpanel,'Callback',@restart_fgapp);% Create close buttoncontrolpanel_u(2) = uicontrol('Style','pushbutton','String','Close',...                      'Units','normalized','Position',[0.51 .1 .47 .8],...                      'parent',controlpanel,'Callback',@close_fgapp);% Settings for the two buttonsset([controlpanel_u(1),controlpanel_u(2)],'FontSize',10,'FontWeight','bold',...                    'ForegroundColor',[.0,.0,.0],'BackgroundColor',[1,1,1]);                %% 06 Create status panel% Create panelstatuspanel = uipanel('Title','',...                       'Units','normalized','Position',[.17 .01 .82 .05],...                       'FontSize',12,'FontWeight','bold',...                       'ForegroundColor',[.0,.0,.0],'BackgroundColor',[.8,.8,.8]);% Allocate cell array for objects in status panelstatuspanel_u = cell(2,2);%% 06a Create elements in status panel% Create status text #1statuspanel_u{1,1} = uicontrol('Style','text','String',' Status: Select program...',...                      'Units','normalized','Position',[.00 .50 0.50 0.50],...                      'parent',statuspanel);% Create status text #2statuspanel_u{2,1} = uicontrol('Style','text','String',' ',...                      'Units','normalized','Position',[.00 .00 0.50 0.50],...                      'parent',statuspanel);% Create status text #3statuspanel_u{1,2} = uicontrol('Style','text','String',sprintf('Data path: %s',data_path),...                      'Units','normalized','Position',[.50 .50 0.50 0.50],...                      'parent',statuspanel);% Create status text #3statuspanel_u{2,2} = uicontrol('Style','text','String',sprintf('Save path: %s',save_path),...                      'Units','normalized','Position',[.50 .00 0.50 0.50],...                      'parent',statuspanel);% Settings for status textset([statuspanel_u{1,1},statuspanel_u{2,1}],...                      'ForegroundColor',[.7,.0,.0],'BackgroundColor',[.0,.0,.0]);set([statuspanel_u{1,2},statuspanel_u{2,2}],...                      'ForegroundColor',[.0,.8,.0],'BackgroundColor',[.0,.0,.0]);set([statuspanel_u{1,1},statuspanel_u{2,1},statuspanel_u{1,2},statuspanel_u{2,2}],...                      'FontSize',9,'FontWeight','bold','HorizontalAlignment','Left');%% Callbacks%% 01 Callback for program button groupfunction select_program(~,event)% 'Downlight' old selectionset(event.OldValue,'ForegroundColor',[.0,.0,.0]);% Highlight new selectionset(event.NewValue,'ForegroundColor',[.0,.0,.8]);% Get the string from selectionradiostr = get(event.NewValue,'String');    % Update status if tools are selected    if strcmp(radiostr,'Tools')        % Update status        set(statuspanel_u{1,1},'String',' Status: Tools selected!',...                               'ForegroundColor',[0.,1.,.0]);        % Make data selection invisible        set([seldatapanel,developpanel],'Visible','off');        % Show tools panel        set(toolspanel,'Visible','on');     elseif strcmp(radiostr,'Development')        % Update states        set(statuspanel_u{1,1},'String',' Status: DevelopmentTools selected!',...                               'ForegroundColor',[0.,1.,.0]);        % Make other panels invisible        set([seldatapanel,toolspanel],'Visible','off');        % Show development panel        set(developpanel,'Visible','on');     else        % Update status        set(statuspanel_u{1,1},'String',sprintf(' Status: %s... ...select data!',radiostr),...                               'ForegroundColor',[1.,1.,.0]);        % Make tools panel invisible        set([toolspanel,developpanel],'Visible','off');        % Show data selection panel        set(seldatapanel,'Visible','on');        % Set header of the panel        set(seldatapanel,'Title',sprintf('%s - Data Selection',radiostr));        % Reset file selection            for I = 1:9            % Reset file operator            files{I,6} = 0;            % Reset button and text            set(seldatapanel_u{I,1},'BackgroundColor',[1.,1.,1.])            set(seldatapanel_t{I,1},'String','No file selected','ForegroundColor',[1.,1.,.0]);            set(seldatapanel_s{I,1},'String','','ForegroundColor',[1.,1.,.0]);            end        % Reset load button        set(seldatapanel_u{10,1},'BackgroundColor',[1.,1.,1.])        % Set start button invisible        set(seldatapanel_u{11,1},'Visible','off');    end    % Reset load operator    load_op = 0;    % Clear input files cell array    files = cell(9,6);    % Set the file operator to zero    for I = 1:9; files{I,6} = 0; end;end%% 02c Data selection callbackfunction seldata_callback(buttonobj,~)% Check from which the callback come% Get the tag number of the selected buttonn = str2double(get(buttonobj,'Tag'));% Select files and divide it into names, extension, fullfile ...[files{n,1},files{n,2}] = uigetfile({'*.mat','MATLAB Files (*.mat)';...                                     '*.xls; *.xlsx','Excel Spreadsheets (*.xls, *.xlsx)';...                                     '*.*','All Files (*.*)'},'Select file!',...                                     data_path);% Same command but also for txt files% [files{n,1},files{n,2}] = uigetfile({'*.mat','MATLAB Files (*.mat)';...%                                      '*.xls; *.xlsx','Excel Spreadsheets (*.xls, *.xlsx)';...%                                      '*.txt; *.dat','ASCII Files (*.txt, *.dat)';...%                                      '*.*','All Files (*.*)'},'Select file!',...%                                      data_path);% Concatenate full file namefiles{n,3} = fullfile(files{n,2},files{n,1});% Get the extension from full file name[files{n,2},files{n,4},files{n,5}] = fileparts(files{n,3});% Reset load session buttonset(seldatapanel_u{10,1},'ForegroundColor',[0.,0.,0.],'BackgroundColor',[1.,1.,1.])assignin('base','files',files)% The load button was used beforeif load_op == 1;    for I = 1:9        if I == n            % Check the currently selected file            % If no file is selected            if files{I,1} == 0                % Change color and text                set(seldatapanel_u{I,1},'BackgroundColor',[.8,.0,.0]);                set(seldatapanel_t{I,1},'String',sprintf('File: none'));                set(seldatapanel_s{I,1},'String',sprintf('File selection aborted!'));                set([seldatapanel_t{I,1},seldatapanel_s{I,1}],'ForegroundColor',[.8,.0,.0]);                % Set operator                files{I,6} = 0;                % If invalid extension is selected            elseif sum(strcmpi(files{I,5},{'.mat';'.txt';'.dat';'.xls';'.xlsx'})) == 0                % Change color and text                set(seldatapanel_u{I,1},'BackgroundColor',[.8,.0,.0]);                set(seldatapanel_t{I,1},'String',sprintf('File: %s',files{I,3}));                set(seldatapanel_s{I,1},'String',sprintf('Invalid file extension!'));                set([seldatapanel_t{I,1},seldatapanel_s{I,1}],'ForegroundColor',[.8,.0,.0]);                % Set operator                files{I,6} = 0;                % Else a valid file is selected            else                % Change color and text                set(seldatapanel_u{I,1},'BackgroundColor',[.0,.8,.0]);                set(seldatapanel_t{I,1},'String',sprintf('File: %s',files{I,3}));                set(seldatapanel_s{I,1},'String',sprintf('Valid file extension!'));                set([seldatapanel_t{I,1},seldatapanel_s{I,1}],'ForegroundColor',[.0,.8,.0]);                % Set operator                files{I,6} = 1;                % Show start button                set(seldatapanel,'Visible','on')            end            % Check        else            if exist(files{I,3},'file')                % Change color and text                set(seldatapanel_u{I,1},'BackgroundColor',[.0,.8,.0]);                set(seldatapanel_t{I,1},'String',sprintf('File: %s',files{I,3}));                set(seldatapanel_s{I,1},'String',sprintf('Valid file extension! - File found in this directory!'));                set([seldatapanel_t{I,1},seldatapanel_s{I,1}],'ForegroundColor',[.0,.8,.0]);                % Set operator                files{I,6} = 1;            else                if strcmpi(files{I,1},'no data') == false                    % Change color and text                    set(seldatapanel_u{I,1},'BackgroundColor',[.8,.0,.0]);                    set(seldatapanel_t{I,1},'String',sprintf('File: %s',files{I,3}));                    set(seldatapanel_s{I,1},'String',sprintf('File is currently not existing in this directory!'));                    set([seldatapanel_t{I,1},seldatapanel_s{I,1}],'ForegroundColor',[.8,.0,.0]);                    % Set operator                    files{I,6} = 0;                end            end        end    end% The load session button was not used beforeelse    % Check the currently selected file    % If no file is selected    if files{n,1} == 0        % Change color and text        set(seldatapanel_u{n,1},'BackgroundColor',[.8,.0,.0]);        set(seldatapanel_t{n,1},'String',sprintf('File: none'));        set(seldatapanel_s{n,1},'String',sprintf('File selection aborted!'));        set([seldatapanel_t{n,1},seldatapanel_s{n,1}],'ForegroundColor',[.8,.0,.0]);        % Set operator        files{n,6} = 0;    % If invalid extension is selected    elseif sum(strcmpi(files{n,5},{'.mat';'.txt';'.dat';'.xls';'.xlsx'})) == 0        % Change color and text        set(seldatapanel_u{n,1},'BackgroundColor',[.8,.0,.0]);        set(seldatapanel_t{n,1},'String',sprintf('File: %s',files{n,3}));        set(seldatapanel_s{n,1},'String',sprintf('Invalid file extension!'));        set([seldatapanel_t{n,1},seldatapanel_s{n,1}],'ForegroundColor',[.8,.0,.0]);        % Set operator        files{n,6} = 0;    % Else a valid file is selected    else        % Change color and text        set(seldatapanel_u{n,1},'BackgroundColor',[.0,.8,.0]);        set(seldatapanel_t{n,1},'String',sprintf('File: %s',files{n,3}));        set(seldatapanel_s{n,1},'String',sprintf('Valid file extension!'));        set([seldatapanel_t{n,1},seldatapanel_s{n,1}],'ForegroundColor',[.0,.8,.0]);        % Set operator        files{n,6} = 1;        % Show start button        set(seldatapanel,'Visible','on')    endend% Check how many files were selected% Update file operatorfiles_op = 0; for I = 1:9; files_op = files_op + files{I,6}; end;% Change visibility of start button% No valid files are selectedif files_op == 0    % Change visibility of the start button    set(seldatapanel_u{11,1},'Visible','off');    % Set status panel    set(statuspanel_u{1,1},'String',sprintf('Status: No valid files selected'),...                           'ForegroundColor',[.8,0.,0.]);% X valid files are selectedelse    % Make the start button visible    set(seldatapanel_u{11,1},'Visible','on');        % X = 1 valid files are selected        if files_op == 1        set(statuspanel_u{1,1},'String',sprintf('Status: %s valid file selected - Press start to begin a new session!',num2str(files_op)),...                               'ForegroundColor',[0.,.8,0.]);        % X > 1 valid files are selected        else        set(statuspanel_u{1,1},'String',sprintf('Status: %s valid files selected - Press start to begin a new session!',num2str(files_op)),...                               'ForegroundColor',[0.,.8,0.]);        endend% If new datasets were load, overwrite load operatorload_op = 0;end%% 02d Start and load button callbackfunction startprog_callback(buttonobj,~)% Get the string of the buttonbuttonstr = get(buttonobj,'String');% Check selected programradiostr = get(get(mainswitch,'SelectedObject'),'String');    % Check the pressed button    if strcmpi(buttonstr,'Load Session')        % Select files and divide it into names, extension, fullfile ...        [file,path] = uigetfile({'*.session','MATLAB Files (*.session)';...                                 '*.*','All Files (*.*)'},'Select session-file!',...                                 save_path);        [path,filename,ext] = fileparts(fullfile(path,file)); %#ok<ASGLU>        % Check the selection from uigetfile        % No valid extension        if file == 0            % Set the load operator to zero            load_op = 0;                % Reset file selection buttons                for I = 1:9                set(seldatapanel_u{I,1},'FontSize',14,'FontWeight','bold','ForegroundColor',[.0,.0,.0],'BackgroundColor',[1.,1.,1.]);                set(seldatapanel_t{I,1},'String',sprintf('No file selected'),...                                        'ForegroundColor',[1.,1.,.0],'BackgroundColor',[.8,.8,.8]);                set(seldatapanel_s{I,1},'String',sprintf(''),...                                        'ForegroundColor',[1.,1.,.0],'BackgroundColor',[.8,.8,.8]);                end            % Reset load button            set(seldatapanel_u{10,1},'FontSize',14,'FontWeight','bold',...                                     'ForegroundColor',[.0,.0,.0],'BackgroundColor',[1.,1.,1.]);            % Make the startbutton visible            set(seldatapanel_u{11,1},'Visible','off')                    % Load file if a valid file was selected        elseif strcmpi('.session',ext)            % Load the file            cont = load(fullfile(path,file),'-mat');            % Shortly check the file for content            if isfield(cont,'control')                if strcmpi(cont.control.program,radiostr)                    control = cont.control;                else                    control = 0;                    errordlg(sprintf('The selected session file is a %s session!\nSelect a %s session to continue!',cont.control.program,radiostr),'Session Error')                end            elseif isfield(cont,'num') || isfield(cont,'raw') || isfield(cont,'txt')                control = 0;            else                control = 0;            end            % Structure is valid            if isstruct(control)                files = control.files;                % Reset the file operator                files_op = 0;                    for I = 1:9                        % Update the file buttons                        if ischar(files{I,3})                        set(seldatapanel_u{I,1},'FontSize',14,'FontWeight','bold','ForegroundColor',[.0,.0,.0],'BackgroundColor',[.0,.8,.0]);                        set(seldatapanel_t{I,1},'String',sprintf('File: %s',files{I,3}),...                                             'ForegroundColor',[.0,.8,.0],'BackgroundColor',[.8,.8,.8]);                        set(seldatapanel_s{I,1},'String',sprintf('Valid file extension!'),...                                             'ForegroundColor',[.0,.8,.0],'BackgroundColor',[.8,.8,.8]);                        files_op = ischar(files{I,3}) + files_op;                        else                        set(seldatapanel_u{I,1},'FontSize',14,'FontWeight','bold','ForegroundColor',[.0,.0,.0],'BackgroundColor',[1.,1.,1.]);                        set(seldatapanel_t{I,1},'String',sprintf('File: No file selected'),...                                             'ForegroundColor',[.8,.8,.8],'BackgroundColor',[.8,.8,.8]);                        set(seldatapanel_s{I,1},'String',sprintf('Valid file extension!'),...                                             'ForegroundColor',[.8,.8,.8],'BackgroundColor',[.8,.8,.8]);                        end                    end                % Update the status panel                set(statuspanel_u{1,1},'String', sprintf('Status: %s datasets in session - Press start to load this session!',...                                       num2str(files_op)),'ForegroundColor',[0.,.8,0.]);                set(seldatapanel_u{10,1},'FontSize',14,'FontWeight','bold',...                                         'ForegroundColor',[.0,.0,.0],'BackgroundColor',[.0,.8,.0]);                % Set load operator on and overwrite files operator with loaded file                load_op = 1; files_op = fullfile(path,file);                % Make the startbutton visible                set(seldatapanel_u{11,1},'Visible','on')            % Wrong contents in file            elseif control == 0;                % Update the status panel                set(statuspanel_u{1,1},'String', sprintf('Status - Selected session is not valid!!!'),...                                       'ForegroundColor',[.8,0.,0.]);                % Reset load button                set(seldatapanel_u{10,1},'FontSize',14,'FontWeight','bold',...                                         'ForegroundColor',[.0,.0,.0],'BackgroundColor',[1.,1.,1.]);                % Make the startbutton invisible                set(seldatapanel_u{11,1},'Visible','off')                % Set load operator on and overwrite files operator with loaded file                load_op = 0;                % Overwrite files cell array                files = cell(9,6);                % Set the file operator to zero                for I = 1:9; files{I,6} = 0; end;                    for I = 1:9                        % Update the file buttons                        set(seldatapanel_u{I,1},'FontSize',14,'FontWeight','bold','ForegroundColor',[.0,.0,.0],'BackgroundColor',[1.,1.,1.]);                        set(seldatapanel_t{I,1},'String',sprintf('No file selected'),...                                                'ForegroundColor',[1.,1.,.0],'BackgroundColor',[.8,.8,.8]);                        set(seldatapanel_s{I,1},'String',sprintf(''),...                                                'ForegroundColor',[1.,1.,.0],'BackgroundColor',[.8,.8,.8]);                    end                % Make the startbutton visible                set(seldatapanel_u{11,1},'Visible','off')            end        else            % Set the load operator to zero            load_op = 0;            % Reset file selection buttons            for I = 1:9                set(seldatapanel_u{I,1},'FontSize',14,'FontWeight','bold','ForegroundColor',[.0,.0,.0],'BackgroundColor',[1.,1.,1.]);                set(seldatapanel_t{I,1},'String',sprintf('No file selected'),...                                        'ForegroundColor',[1.,1.,.0],'BackgroundColor',[.8,.8,.8]);                set(seldatapanel_s{I,1},'String',sprintf(''),...                                        'ForegroundColor',[1.,1.,.0],'BackgroundColor',[.8,.8,.8]);            end            % Reset load button            set(seldatapanel_u{10,1},'FontSize',14,'FontWeight','bold',...                                     'ForegroundColor',[.0,.0,.0],'BackgroundColor',[1.,1.,1.]);            % Make the startbutton visible            set(seldatapanel_u{11,1},'Visible','off')        end    % Else the start button was pressed    else        % Use the start programs function to start the program        start_programs(radiostr,load_op,files,files_op,save_path)    endend%% 03b Tools callbacksfunction tools_callback(buttonobj,~)    % Get the string from pressed button    buttonstr = get(buttonobj,'String');    % Handle the selected tool    if strcmpi(buttonstr,'Data path')        statuspanel_u{1,2} = tool_data_path(statuspanel_u{1,2});    elseif strcmpi(buttonstr,'Save path')        statuspanel_u{2,2} = tool_save_path(statuspanel_u{2,2});    elseif strcmpi(buttonstr,'Clear config file')        [statuspanel_u{1,2},statuspanel_u{2,2}] = tool_clear_config(statuspanel_u{1,2},statuspanel_u{2,2});    elseif strcmpi(buttonstr,'Convert to MAT')        tool_convert2mat(data_path)    elseif strcmpi(buttonstr,'GeoT')        tool_geoT    elseif strcmpi(buttonstr,'Chem. Elements')        tool_elements    elseif strcmpi(buttonstr,'PTE')        tool_PTE    else        fprintf('Error: This tool does not exist!\n')        fprintf('Check tools panel setup and callback to solve this issue\n')    endend%% 04 Restart/close button% Callback for restart button    function restart_fgapp(~,~)        % Close all figures and clear all data        close all        clear all        % Start FastGAPP again        FGAPP20    end% Callback for close button    function close_fgapp(~,~)        % Close all figures and clear all data        close all        clear all    end%% 00 Make the GUI and all controls visible% Set figure visibleset(fgapp_ini,'Visible','on');% Output to command windowfprintf('...main window launched! - Time: %s\n\n',datestr(clock)); % + blank rowend